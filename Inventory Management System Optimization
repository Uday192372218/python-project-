# Define the inventory system structure
define Product, Warehouse, and InventoryLevel classes

# Implement the inventory tracking application
class InventoryTrackingApp:
    def __init__(self, products, warehouses):
        self.products = products
        self.warehouses = warehouses
        self.inventory_levels = self.initialize_inventory_levels()

    def initialize_inventory_levels(self):
        # Initialize inventory levels based on the provided data
        inventory_levels = []
        for product in self.products:
            for warehouse in self.warehouses:
                inventory_level = InventoryLevel(product, warehouse, initial_stock)
                inventory_levels.append(inventory_level)
        return inventory_levels

    def track_inventory(self):
        # Monitor inventory levels and send alerts when stock falls below threshold
        for inventory_level in self.inventory_levels:
            if inventory_level.current_stock < inventory_level.reorder_point:
                send_alert(inventory_level)

# Optimize inventory ordering
def calculate_reorder_point(product, warehouse, historical_sales, lead_time):
    # Calculate the optimal reorder point based on historical sales and lead time
    safety_stock = calculate_safety_stock(historical_sales, lead_time)
    reorder_point = safety_stock + (average_daily_sales * lead_time)
    return reorder_point

def calculate_reorder_quantity(product, warehouse, historical_sales, lead_time, reorder_point):
    # Calculate the optimal reorder quantity based on historical sales, lead time, and reorder point
    economic_order_quantity = calculate_economic_order_quantity(historical_sales, holding_cost, ordering_cost)
    reorder_quantity = max(economic_order_quantity, product.minimum_order_quantity)
    return reorder_quantity

# Generate reports
def generate_inventory_turnover_report(inventory_levels):
    # Calculate and report on inventory turnover rates
    pass

def generate_stockout_report(inventory_levels):
    # Report on stockout occurrences and their cost implications
    pass

def generate_overstock_report(inventory_levels):
    # Report on overstock situations and their cost implications
    pass

# User interaction
class InventoryManagementUI:
    def __init__(self, inventory_tracking_app):
        self.inventory_tracking_app = inventory_tracking_app

    def display_inventory_information(self, product_id):
        # Allow users to view current stock levels, reorder recommendations, and historical data
        pass
